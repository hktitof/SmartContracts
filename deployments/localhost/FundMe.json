{
  "address": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "priceFeedAddress",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "inputs": [],
      "name": "Failed",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "FunMe__NotOwner",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotEnoughETH",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "MINIMUM_USD",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "cheaperWithdraw",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fund",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "funder",
          "type": "address"
        }
      ],
      "name": "getAdressToAmountFunded",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getFunders",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getPriceFeed",
      "outputs": [
        {
          "internalType": "contract AggregatorV3Interface",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "s_funders",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    }
  ],
  "transactionHash": "0x203a3330c825820b87613d5309f966daec74b8cd8be298f2f4172fc1783f630d",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0xe7f1725E7734CE288F8367e1Bb143E90bb3F0512",
    "transactionIndex": 0,
    "gasUsed": "1029646",
    "logsBloom": "0x
    "blockHash": "0x16aa134fe988579fc6afc6cdb9673bbe5eb305d75f41280c678562a4bee44f2d",
    "transactionHash": "0x203a3330c825820b87613d5309f966daec74b8cd8be298f2f4172fc1783f630d",
    "logs": [],
    "blockNumber": 2,
    "cumulativeGasUsed": "1029646",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x5FbDB2315678afecb367f032d93F642f64180aa3"
  ],
  "numDeployments": 1,
  "solcInputHash": "0ba4226062bacf43b6e52cdc80645a4e",
  "metadata": "{\"compiler\":{\"version\":\"0.8.8+commit.dddeac2f\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"priceFeedAddress\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"inputs\":[],\"name\":\"Failed\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"FunMe__NotOwner\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotEnoughETH\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"MINIMUM_USD\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"cheaperWithdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fund\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"funder\",\"type\":\"address\"}],\"name\":\"getAdressToAmountFunded\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getFunders\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getPriceFeed\",\"outputs\":[{\"internalType\":\"contract AggregatorV3Interface\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"s_funders\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"}],\"devdoc\":{\"author\":\"linkedin: @abdellatif-anaflous\",\"kind\":\"dev\",\"methods\":{},\"title\":\"FundMe A contract for crowd funding\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/FundMe.sol\":\"FundMe\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[]},\"sources\":{\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\ninterface AggregatorV3Interface {\\n  function decimals() external view returns (uint8);\\n\\n  function description() external view returns (string memory);\\n\\n  function version() external view returns (uint256);\\n\\n  // getRoundData and latestRoundData should both raise \\\"No data present\\\"\\n  // if they do not have data to report, instead of returning unset values\\n  // which could be misinterpreted as actual reported values.\\n  function getRoundData(uint80 _roundId)\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n\\n  function latestRoundData()\\n    external\\n    view\\n    returns (\\n      uint80 roundId,\\n      int256 answer,\\n      uint256 startedAt,\\n      uint256 updatedAt,\\n      uint80 answeredInRound\\n    );\\n}\\n\",\"keccak256\":\"0xf2b6c9adb3552254df1445b73563cf014434ff5e78663e9b961b6c059506ceb5\",\"license\":\"MIT\"},\"contracts/FundMe.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\nimport \\\"./PriceConverter.sol\\\";\\n\\nerror FunMe__NotOwner();\\nerror NotEnoughETH();\\nerror Failed();\\n\\n/** @title FundMe A contract for crowd funding\\n    @author linkedin: @abdellatif-anaflous\\n */\\n\\ncontract FundMe {\\n    using PriceConverter for uint256;\\n\\n    mapping(address => uint256) private s_addressToAmountFunded;\\n    address[] public s_funders;\\n\\n    // Could we make this constant?  /* hint: no! We should make it immutable! */\\n    address private immutable i_owner;\\n    uint256 public constant MINIMUM_USD = 50 * 10**18;\\n    AggregatorV3Interface private s_priceFeed;\\n\\n    constructor(address priceFeedAddress) {\\n        i_owner = msg.sender;\\n        s_priceFeed = AggregatorV3Interface(priceFeedAddress);\\n    }\\n\\n    function fund() public payable {\\n        if(msg.value.getConversionRate(s_priceFeed) < MINIMUM_USD) revert NotEnoughETH();\\n        // require(PriceConverter.getConversionRate(msg.value) >= MINIMUM_USD, \\\"You need to spend more ETH!\\\");\\n        s_addressToAmountFunded[msg.sender] += msg.value;\\n        s_funders.push(msg.sender);\\n    }\\n\\n    modifier onlyOwner(address _caller) {\\n        // require(_caller == owner,FunMe__NotOwner()); those two lines are equivalent\\n        if (_caller != i_owner) revert FunMe__NotOwner();\\n        _;\\n    }\\n\\n    function withdraw() public payable onlyOwner(msg.sender) {\\n        payable(msg.sender).transfer(address(this).balance);\\n        for (\\n            uint256 funderIndex = 0;\\n            funderIndex < s_funders.length;\\n            funderIndex++\\n        ) {\\n            address funder = s_funders[funderIndex];\\n            s_addressToAmountFunded[funder] = 0;\\n        }\\n        s_funders = new address[](0);\\n        (bool success,)=payable(msg.sender).call{\\n            value: address(this).balance\\n        }(\\\"\\\");\\n        if(!success) revert Failed();\\n    }\\n\\n    function cheaperWithdraw() public payable onlyOwner(msg.sender){\\n        address[] memory funders = s_funders;\\n        // * mapings can't be in memory, sorry!\\n        for ( uint256 funderIndex = 0; funderIndex<funders.length; funderIndex++){\\n            address funder = funders[funderIndex];\\n            s_addressToAmountFunded[funder] = 0;\\n        }\\n        s_funders=new address[](0);\\n        (bool success,)=i_owner.call{value:address(this).balance}(\\\"\\\");\\n        if(!success) revert Failed();\\n    }\\n\\n\\n    // View & Pure Functions\\n    function getOwner() public view returns (address){\\n        return i_owner;\\n    }\\n    function getFunders(uint256 index) public view returns (address){\\n        return s_funders[index];\\n    }\\n\\n    function getAdressToAmountFunded(address funder) public view returns (uint256){\\n        return s_addressToAmountFunded[funder];\\n    }\\n    \\n    function getPriceFeed() public view returns (AggregatorV3Interface){\\n        return s_priceFeed;\\n    }\\n\\n\\n\\n}\\n\\n// not covered yet\\n// 1. Enum\\n// 2. Events\\n// 3. Try / Catch\\n// 4. Function Selector\\n// 5. abi.encode / decode\\n// 6. Hash with keccak256\\n// 7. Yul / Assembly\\n\",\"keccak256\":\"0xaaf83f54243e89c51d5d49bb4ea430ed3f45119c3ab25699ed157650abbed30a\",\"license\":\"MIT\"},\"contracts/PriceConverter.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.8;\\n\\nimport \\\"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\\\";\\n\\n// Why is this a library and not abstract?\\n// Why not an interface?\\nlibrary PriceConverter {\\n    // We could make this public, but then we'd have to deploy it\\n    function getPrice(AggregatorV3Interface priceFeed) internal view returns (uint256) {\\n        // Rinkeby ETH / USD Address\\n        // https://docs.chain.link/docs/ethereum-addresses/\\n        // AggregatorV3Interface priceFeed = AggregatorV3Interface(\\n        //     0x8A753747A1Fa494EC906cE90E9f37563A8AF630e\\n        // );\\n        (, int256 answer, , , ) = priceFeed.latestRoundData();\\n        // ETH/USD rate in 18 digit\\n        return uint256(answer * 10000000000);\\n    }\\n\\n    // 1000000000\\n    function getConversionRate(uint256 ethAmount,AggregatorV3Interface priceFeed)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        uint256 ethPrice = getPrice(priceFeed);\\n        uint256 ethAmountInUsd = (ethPrice * ethAmount) / 1000000000000000000;\\n        // the actual ETH/USD conversion rate, after adjusting the extra 0s.\\n        return ethAmountInUsd;\\n    }\\n}\",\"keccak256\":\"0x24838f6d7b8a4e40ebe26cfcbb998d77d5bc132f273933b21335c09429faa15a\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60a06040523480156200001157600080fd5b50604051620012c8380380620012c8833981810160405281019062000037919062000120565b3373ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b8152505080600260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff1602179055505062000152565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000620000e882620000bb565b9050919050565b620000fa81620000db565b81146200010657600080fd5b50565b6000815190506200011a81620000ef565b92915050565b600060208284031215620001395762000138620000b6565b5b6000620001498482850162000109565b91505092915050565b60805160601c611142620001866000396000818161022c015281816104f9015281816106c301526108b901526111426000f3fe6080604052600436106100865760003560e01c8063893d20e811610059578063893d20e81461013a5780639a59cd9e146101655780639e87a5cd146101a2578063b60d4288146101cd578063be2693f0146101d757610086565b80633a7b6c741461008b5780633ccfd60b146100c857806354861af7146100d25780636b69a5921461010f575b600080fd5b34801561009757600080fd5b506100b260048036038101906100ad9190610b3b565b6101e1565b6040516100bf9190610ba9565b60405180910390f35b6100d0610229565b005b3480156100de57600080fd5b506100f960048036038101906100f49190610b3b565b6104a9565b6040516101069190610ba9565b60405180910390f35b34801561011b57600080fd5b506101246104e8565b6040516101319190610bd3565b60405180910390f35b34801561014657600080fd5b5061014f6104f5565b60405161015c9190610ba9565b60405180910390f35b34801561017157600080fd5b5061018c60048036038101906101879190610c1a565b61051d565b6040516101999190610bd3565b60405180910390f35b3480156101ae57600080fd5b506101b7610565565b6040516101c49190610ca6565b60405180910390f35b6101d561058f565b005b6101df6106c0565b005b6000600182815481106101f7576101f6610cc1565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b337f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16146102af576040517f54ec562800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff166108fc479081150290604051600060405180830381858888f193505050501580156102f5573d6000803e3d6000fd5b5060005b6001805490508110156103a15760006001828154811061031c5761031b610cc1565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061039990610d1f565b9150506102f9565b50600067ffffffffffffffff8111156103bd576103bc610d68565b5b6040519080825280602002602001820160405280156103eb5781602001602082028036833780820191505090505b5060019080519060200190610401929190610a59565b5060003373ffffffffffffffffffffffffffffffffffffffff164760405161042890610dc8565b60006040518083038185875af1925050503d8060008114610465576040519150601f19603f3d011682016040523d82523d6000602084013e61046a565b606091505b50509050806104a5576040517f625a40e600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5050565b600181815481106104b957600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6802b5e3af16b188000081565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6802b5e3af16b18800006105ce600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff163461097d90919063ffffffff16565b1015610606576040517f583aa02600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b346000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546106549190610ddd565b925050819055506001339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b337f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610746576040517f54ec562800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600060018054806020026020016040519081016040528092919081815260200182805480156107ca57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610780575b5050505050905060005b81518110156108545760008282815181106107f2576107f1610cc1565b5b6020026020010151905060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061084c90610d1f565b9150506107d4565b50600067ffffffffffffffff8111156108705761086f610d68565b5b60405190808252806020026020018201604052801561089e5781602001602082028036833780820191505090505b50600190805190602001906108b4929190610a59565b5060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16476040516108fb90610dc8565b60006040518083038185875af1925050503d8060008114610938576040519150601f19603f3d011682016040523d82523d6000602084013e61093d565b606091505b5050905080610978576040517f625a40e600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b505050565b600080610989836109b9565b90506000670de0b6b3a764000085836109a29190610e33565b6109ac9190610ebc565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b158015610a0257600080fd5b505afa158015610a16573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a3a9190610f7a565b5050509150506402540be40081610a519190610ff5565b915050919050565b828054828255906000526020600020908101928215610ad2579160200282015b82811115610ad15782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610a79565b5b509050610adf9190610ae3565b5090565b5b80821115610afc576000816000905550600101610ae4565b5090565b600080fd5b6000819050919050565b610b1881610b05565b8114610b2357600080fd5b50565b600081359050610b3581610b0f565b92915050565b600060208284031215610b5157610b50610b00565b5b6000610b5f84828501610b26565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610b9382610b68565b9050919050565b610ba381610b88565b82525050565b6000602082019050610bbe6000830184610b9a565b92915050565b610bcd81610b05565b82525050565b6000602082019050610be86000830184610bc4565b92915050565b610bf781610b88565b8114610c0257600080fd5b50565b600081359050610c1481610bee565b92915050565b600060208284031215610c3057610c2f610b00565b5b6000610c3e84828501610c05565b91505092915050565b6000819050919050565b6000610c6c610c67610c6284610b68565b610c47565b610b68565b9050919050565b6000610c7e82610c51565b9050919050565b6000610c9082610c73565b9050919050565b610ca081610c85565b82525050565b6000602082019050610cbb6000830184610c97565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610d2a82610b05565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610d5d57610d5c610cf0565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610db2600083610d97565b9150610dbd82610da2565b600082019050919050565b6000610dd382610da5565b9150819050919050565b6000610de882610b05565b9150610df383610b05565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610e2857610e27610cf0565b5b828201905092915050565b6000610e3e82610b05565b9150610e4983610b05565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610e8257610e81610cf0565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610ec782610b05565b9150610ed283610b05565b925082610ee257610ee1610e8d565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610f0c81610eed565b8114610f1757600080fd5b50565b600081519050610f2981610f03565b92915050565b6000819050919050565b610f4281610f2f565b8114610f4d57600080fd5b50565b600081519050610f5f81610f39565b92915050565b600081519050610f7481610b0f565b92915050565b600080600080600060a08688031215610f9657610f95610b00565b5b6000610fa488828901610f1a565b9550506020610fb588828901610f50565b9450506040610fc688828901610f65565b9350506060610fd788828901610f65565b9250506080610fe888828901610f1a565b9150509295509295909350565b600061100082610f2f565b915061100b83610f2f565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048211600084136000841316161561104a57611049610cf0565b5b817f8000000000000000000000000000000000000000000000000000000000000000058312600084126000841316161561108757611086610cf0565b5b827f800000000000000000000000000000000000000000000000000000000000000005821260008413600084121616156110c4576110c3610cf0565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff058212600084126000841216161561110157611100610cf0565b5b82820290509291505056fea2646970667358221220ff82465645d9061ddaaa32533f3301eda79c902eddcfbbf47cf23bed34d3abe164736f6c63430008080033",
  "deployedBytecode": "0x6080604052600436106100865760003560e01c8063893d20e811610059578063893d20e81461013a5780639a59cd9e146101655780639e87a5cd146101a2578063b60d4288146101cd578063be2693f0146101d757610086565b80633a7b6c741461008b5780633ccfd60b146100c857806354861af7146100d25780636b69a5921461010f575b600080fd5b34801561009757600080fd5b506100b260048036038101906100ad9190610b3b565b6101e1565b6040516100bf9190610ba9565b60405180910390f35b6100d0610229565b005b3480156100de57600080fd5b506100f960048036038101906100f49190610b3b565b6104a9565b6040516101069190610ba9565b60405180910390f35b34801561011b57600080fd5b506101246104e8565b6040516101319190610bd3565b60405180910390f35b34801561014657600080fd5b5061014f6104f5565b60405161015c9190610ba9565b60405180910390f35b34801561017157600080fd5b5061018c60048036038101906101879190610c1a565b61051d565b6040516101999190610bd3565b60405180910390f35b3480156101ae57600080fd5b506101b7610565565b6040516101c49190610ca6565b60405180910390f35b6101d561058f565b005b6101df6106c0565b005b6000600182815481106101f7576101f6610cc1565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff169050919050565b337f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff16146102af576040517f54ec562800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b3373ffffffffffffffffffffffffffffffffffffffff166108fc479081150290604051600060405180830381858888f193505050501580156102f5573d6000803e3d6000fd5b5060005b6001805490508110156103a15760006001828154811061031c5761031b610cc1565b5b9060005260206000200160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061039990610d1f565b9150506102f9565b50600067ffffffffffffffff8111156103bd576103bc610d68565b5b6040519080825280602002602001820160405280156103eb5781602001602082028036833780820191505090505b5060019080519060200190610401929190610a59565b5060003373ffffffffffffffffffffffffffffffffffffffff164760405161042890610dc8565b60006040518083038185875af1925050503d8060008114610465576040519150601f19603f3d011682016040523d82523d6000602084013e61046a565b606091505b50509050806104a5576040517f625a40e600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5050565b600181815481106104b957600080fd5b906000526020600020016000915054906101000a900473ffffffffffffffffffffffffffffffffffffffff1681565b6802b5e3af16b188000081565b60007f0000000000000000000000000000000000000000000000000000000000000000905090565b60008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020549050919050565b6000600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905090565b6802b5e3af16b18800006105ce600260009054906101000a900473ffffffffffffffffffffffffffffffffffffffff163461097d90919063ffffffff16565b1015610606576040517f583aa02600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b346000803373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008282546106549190610ddd565b925050819055506001339080600181540180825580915050600190039060005260206000200160009091909190916101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff160217905550565b337f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff168173ffffffffffffffffffffffffffffffffffffffff1614610746576040517f54ec562800000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600060018054806020026020016040519081016040528092919081815260200182805480156107ca57602002820191906000526020600020905b8160009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019060010190808311610780575b5050505050905060005b81518110156108545760008282815181106107f2576107f1610cc1565b5b6020026020010151905060008060008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000208190555050808061084c90610d1f565b9150506107d4565b50600067ffffffffffffffff8111156108705761086f610d68565b5b60405190808252806020026020018201604052801561089e5781602001602082028036833780820191505090505b50600190805190602001906108b4929190610a59565b5060007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16476040516108fb90610dc8565b60006040518083038185875af1925050503d8060008114610938576040519150601f19603f3d011682016040523d82523d6000602084013e61093d565b606091505b5050905080610978576040517f625a40e600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b505050565b600080610989836109b9565b90506000670de0b6b3a764000085836109a29190610e33565b6109ac9190610ebc565b9050809250505092915050565b6000808273ffffffffffffffffffffffffffffffffffffffff1663feaf968c6040518163ffffffff1660e01b815260040160a06040518083038186803b158015610a0257600080fd5b505afa158015610a16573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a3a9190610f7a565b5050509150506402540be40081610a519190610ff5565b915050919050565b828054828255906000526020600020908101928215610ad2579160200282015b82811115610ad15782518260006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555091602001919060010190610a79565b5b509050610adf9190610ae3565b5090565b5b80821115610afc576000816000905550600101610ae4565b5090565b600080fd5b6000819050919050565b610b1881610b05565b8114610b2357600080fd5b50565b600081359050610b3581610b0f565b92915050565b600060208284031215610b5157610b50610b00565b5b6000610b5f84828501610b26565b91505092915050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b6000610b9382610b68565b9050919050565b610ba381610b88565b82525050565b6000602082019050610bbe6000830184610b9a565b92915050565b610bcd81610b05565b82525050565b6000602082019050610be86000830184610bc4565b92915050565b610bf781610b88565b8114610c0257600080fd5b50565b600081359050610c1481610bee565b92915050565b600060208284031215610c3057610c2f610b00565b5b6000610c3e84828501610c05565b91505092915050565b6000819050919050565b6000610c6c610c67610c6284610b68565b610c47565b610b68565b9050919050565b6000610c7e82610c51565b9050919050565b6000610c9082610c73565b9050919050565b610ca081610c85565b82525050565b6000602082019050610cbb6000830184610c97565b92915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610d2a82610b05565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610d5d57610d5c610cf0565b5b600182019050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600081905092915050565b50565b6000610db2600083610d97565b9150610dbd82610da2565b600082019050919050565b6000610dd382610da5565b9150819050919050565b6000610de882610b05565b9150610df383610b05565b9250827fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff03821115610e2857610e27610cf0565b5b828201905092915050565b6000610e3e82610b05565b9150610e4983610b05565b9250817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0483118215151615610e8257610e81610cf0565b5b828202905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000610ec782610b05565b9150610ed283610b05565b925082610ee257610ee1610e8d565b5b828204905092915050565b600069ffffffffffffffffffff82169050919050565b610f0c81610eed565b8114610f1757600080fd5b50565b600081519050610f2981610f03565b92915050565b6000819050919050565b610f4281610f2f565b8114610f4d57600080fd5b50565b600081519050610f5f81610f39565b92915050565b600081519050610f7481610b0f565b92915050565b600080600080600060a08688031215610f9657610f95610b00565b5b6000610fa488828901610f1a565b9550506020610fb588828901610f50565b9450506040610fc688828901610f65565b9350506060610fd788828901610f65565b9250506080610fe888828901610f1a565b9150509295509295909350565b600061100082610f2f565b915061100b83610f2f565b9250827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff048211600084136000841316161561104a57611049610cf0565b5b817f8000000000000000000000000000000000000000000000000000000000000000058312600084126000841316161561108757611086610cf0565b5b827f800000000000000000000000000000000000000000000000000000000000000005821260008413600084121616156110c4576110c3610cf0565b5b827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff058212600084126000841216161561110157611100610cf0565b5b82820290509291505056fea2646970667358221220ff82465645d9061ddaaa32533f3301eda79c902eddcfbbf47cf23bed34d3abe164736f6c63430008080033",
  "devdoc": {
    "author": "linkedin: @abdellatif-anaflous",
    "kind": "dev",
    "methods": {},
    "title": "FundMe A contract for crowd funding",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 63,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_addressToAmountFunded",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 66,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_funders",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_address)dyn_storage"
      },
      {
        "astId": 78,
        "contract": "contracts/FundMe.sol:FundMe",
        "label": "s_priceFeed",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(AggregatorV3Interface)45"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_address)dyn_storage": {
        "base": "t_address",
        "encoding": "dynamic_array",
        "label": "address[]",
        "numberOfBytes": "32"
      },
      "t_contract(AggregatorV3Interface)45": {
        "encoding": "inplace",
        "label": "contract AggregatorV3Interface",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}