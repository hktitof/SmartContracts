/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type { Reverse2, Reverse2Interface } from "../../reverse2.sol/Reverse2";

const _abi = [
  {
    inputs: [
      {
        internalType: "address",
        name: "_contractAdd",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "Failed",
    type: "error",
  },
  {
    inputs: [],
    name: "LowBalance",
    type: "error",
  },
  {
    inputs: [],
    name: "Unauthorized",
    type: "error",
  },
  {
    inputs: [],
    name: "beginFailed",
    type: "error",
  },
  {
    inputs: [],
    name: "addFund",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
  {
    inputs: [],
    name: "begin",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "showBalance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
];

const _bytecode =
  "0x60c060405234801561001057600080fd5b5060405161099d38038061099d83398181016040528101906100329190610206565b6100647f4a515e90e60a60358492face0ce1694d474dad171ecb4cf754962991d025efb560001b6101a060201b60201c565b6100967f4a32514021d557fd98e8ded98ca702bcb204fffee5afa7a63b2d2d4e7c57c00c60001b6101a060201b60201c565b6100c87ffac83f89b949f4ca59b757f6a8233d04ed561285ce68f49814a32f88311c2c4a60001b6101a060201b60201c565b3373ffffffffffffffffffffffffffffffffffffffff1660808173ffffffffffffffffffffffffffffffffffffffff1660601b815250506101317f5c29094879e944b784e95a3d2fa237336a1d15e3f9c32e1f4e40797bdc87ccbe60001b6101a060201b60201c565b6101637fde01d33c1f5d886a95cbf57d7c038ebb3bff4f534828494f4a2685abfdac896e60001b6101a060201b60201c565b8073ffffffffffffffffffffffffffffffffffffffff1660a08173ffffffffffffffffffffffffffffffffffffffff1660601b8152505050610233565b50565b600080fd5b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b60006101d3826101a8565b9050919050565b6101e3816101c8565b81146101ee57600080fd5b50565b600081519050610200816101da565b92915050565b60006020828403121561021c5761021b6101a3565b5b600061022a848285016101f1565b91505092915050565b60805160601c60a05160601c61073f61025e600039600061046301526000610343015261073f6000f3fe6080604052600436106100385760003560e01c80631bce6ff31461025757806381b2d07b1461026e578063a2f09dfa1461029957610252565b36610252576100697ffbb64b841f7511ed2de764c11212071abf5aa35dabb1d319d1a2e23c408d267f60001b6102a3565b60004714156100d05761009e7f57e997248a161ffd122264d5841bcf4201ce1b537d55138d8ceade52793fee4160001b6102a3565b6040517ffe382aa700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6100fc7f248e379e7a726e3301a9a042e41cb004dec89e4527f6922de2cc050eeed9fcbf60001b6102a3565b6101287f39e5cbfb025cdec977fd70cc72a687839680272cd583ec04a3d98fbdfb598a6b60001b6102a3565b60003373ffffffffffffffffffffffffffffffffffffffff164760405161014e906106c0565b60006040518083038185875af1925050503d806000811461018b576040519150601f19603f3d011682016040523d82523d6000602084013e610190565b606091505b505090506101c07fe4cb6f467d56e7aa4586a13560be87ca3d9a2bc05116d31660efab33b9ba245d60001b6102a3565b80610223576101f17f2ab5af3cd157bfd13339d01a73e7936e155762e8f2a3b003929de7de37f7d05160001b6102a3565b6040517f625a40e600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61024f7f031236b04ff386022e6c43cbd84b7725479081506a3fb5a2a510aa1a011e325860001b6102a3565b50005b600080fd5b34801561026357600080fd5b5061026c6102a6565b005b34801561027a57600080fd5b506102836105d5565b60405161029091906106ee565b60405180910390f35b6102a1610661565b005b50565b6102d27f7a53a480e8b1b1bff0ed42c210a912b3fc1d2d1d42b570148149fa093807a70460001b6102a3565b6102fe7f31f85a9ac0a259a30935bf78fd4f8376d085748bca6397fd13ac84ca23e599e060001b6102a3565b61032a7fb96da07e11bd3b554bae205dc68fb09cd6898dfcbf0ac0914a8c510f472b870a60001b6102a3565b3373ffffffffffffffffffffffffffffffffffffffff167f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16146103db576103a97f189d10cff1d25a9cd6029dccc50ae19340cb65b5f6a5e8fe73fa9df048d8803a60001b6102a3565b6040517f82b4290000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6104077f5d30bcbc6512907cfac5d530632bd8c4956d705f7d6afea74cfeabe86dd5db4660001b6102a3565b6104337f051ea07e5c25b7160cdc082f3d8424149f19bf93490e7b45c176e7a45a23cd5360001b6102a3565b61045f7f9ed220bb3fe72241f71de7444d05a6517552020751df8e69433914ace071e0e560001b6102a3565b60007f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16476040516104a5906106c0565b60006040518083038185875af1925050503d80600081146104e2576040519150601f19603f3d011682016040523d82523d6000602084013e6104e7565b606091505b505090506105177f4f63b7d0a28412770e55e212af5715cd442cee6d824e6073e7367b5446dbf49860001b6102a3565b6105437f73d7b0975f0dd8d1cb9570ba9c8717ddbfab2f12ff38cd512a869a60df0a4daf60001b6102a3565b806105a6576105747ff05507298b1b1b5c853653f02f709791a865775e80e22bc2c9c5fb3bbf830ded60001b6102a3565b6040517f0bc45f8600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b6105d27f2ed45e3c10e9c1896824ac3fdc79e265b1f847d56b6dd173770ec37886bcaccb60001b6102a3565b50565b60006106037f22558480cae9a09156f2cabf92cea334419f4426db859b9ebe1f5b7a75e1cbf360001b6102a3565b61062f7fb4e7b59ae68ec2ca668c2d3adf0ec77526f22b84e828755b1cd35c8e994f98dc60001b6102a3565b61065b7ff5f7493e1762f6644f0ae43b9dc687650eb430ab36dd24431862c749e5d8fb6960001b6102a3565b47905090565b61068d7f9aff5dbe621acb97fcd7816cf61405e6bc13e69c2b34e8cbd9f75e50cdd881a060001b6102a3565b565b600081905092915050565b50565b60006106aa60008361068f565b91506106b58261069a565b600082019050919050565b60006106cb8261069d565b9150819050919050565b6000819050919050565b6106e8816106d5565b82525050565b600060208201905061070360008301846106df565b9291505056fea26469706673582212200159a6682a2e2ea15ce16022c8ec0904d638d00ce839c6a9b5c31e911142a4cd64736f6c63430008080033";

type Reverse2ConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: Reverse2ConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Reverse2__factory extends ContractFactory {
  constructor(...args: Reverse2ConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    _contractAdd: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Reverse2> {
    return super.deploy(_contractAdd, overrides || {}) as Promise<Reverse2>;
  }
  override getDeployTransaction(
    _contractAdd: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_contractAdd, overrides || {});
  }
  override attach(address: string): Reverse2 {
    return super.attach(address) as Reverse2;
  }
  override connect(signer: Signer): Reverse2__factory {
    return super.connect(signer) as Reverse2__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): Reverse2Interface {
    return new utils.Interface(_abi) as Reverse2Interface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Reverse2 {
    return new Contract(address, _abi, signerOrProvider) as Reverse2;
  }
}
