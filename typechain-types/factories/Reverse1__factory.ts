/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../common";
import type { Reverse1, Reverse1Interface } from "../Reverse1";

const _abi = [
  {
    inputs: [],
    name: "LowBalance",
    type: "error",
  },
  {
    stateMutability: "payable",
    type: "receive",
  },
];

const _bytecode =
  "0x6080604052348015600f57600080fd5b50607f8061001e6000396000f3fe60806040523660445760004714156042576040517ffe382aa700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b005b600080fdfea2646970667358221220b7a084038f294784e9f5d14c891f9a2f535931e7ed5398020859d35d7c2d178464736f6c63430008080033";

type Reverse1ConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: Reverse1ConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Reverse1__factory extends ContractFactory {
  constructor(...args: Reverse1ConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Reverse1> {
    return super.deploy(overrides || {}) as Promise<Reverse1>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): Reverse1 {
    return super.attach(address) as Reverse1;
  }
  override connect(signer: Signer): Reverse1__factory {
    return super.connect(signer) as Reverse1__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): Reverse1Interface {
    return new utils.Interface(_abi) as Reverse1Interface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Reverse1 {
    return new Contract(address, _abi, signerOrProvider) as Reverse1;
  }
}
